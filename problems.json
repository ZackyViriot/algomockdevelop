{
    "problems": [
      {
        "id": "two-sum",
        "title": "Two Sum",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
        "difficulty": "Easy",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "15-30 min",
        "examples": [
          {
            "input": "nums = [2,7,11,15], target = 9",
            "output": "[0,1]",
            "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
          },
          {
            "input": "nums = [3,2,4], target = 6",
            "output": "[1,2]",
            "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
          }
        ],
        "templatePy": "def solution(nums, target):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, target) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[2,7,11,15], 9],
            "output": [0,1]
          },
          {
            "input": [[3,2,4], 6],
            "output": [1,2]
          },
          {
            "input": [[3,3], 6],
            "output": [0,1]
          }
        ]
      },
      {
        "id": "best-time-to-buy-and-sell-stock",
        "title": "Best Time to Buy and Sell Stock",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
        "difficulty": "Easy",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "prices = [7,1,5,3,6,4]",
            "output": "5",
            "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
          },
          {
            "input": "prices = [7,6,4,3,1]",
            "output": "0",
            "explanation": "No transactions are done and the max profit = 0."
          }
        ],
        "templatePy": "def solution(prices):\n    # Your code here\n    pass",
        "templateJs": "function solution(prices) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[7,1,5,3,6,4]],
            "output": 5
          },
          {
            "input": [[7,6,4,3,1]],
            "output": 0
          },
          {
            "input": [[2,4,1]],
            "output": 2
          }
        ]
      },
      {
        "id": "contains-duplicate",
        "title": "Contains Duplicate",
        "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
        "difficulty": "Easy",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "10-20 min",
        "examples": [
          {
            "input": "nums = [1,2,3,1]",
            "output": "true",
            "explanation": "1 appears twice."
          },
          {
            "input": "nums = [1,2,3,4]",
            "output": "false",
            "explanation": "All elements are distinct."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,1]],
            "output": true
          },
          {
            "input": [[1,2,3,4]],
            "output": false
          },
          {
            "input": [[1,1,1,3,3,4,3,2,4,2]],
            "output": true
          }
        ]
      },
      {
        "id": "find-minimum-in-rotated-sorted-array",
        "title": "Find Minimum in Rotated Sorted Array",
        "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]. Given the sorted rotated array nums of unique elements, return the minimum element of this array.",
        "difficulty": "Medium",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "nums = [3,4,5,1,2]",
            "output": "1",
            "explanation": "The original array was [1,2,3,4,5] rotated 3 times."
          },
          {
            "input": "nums = [4,5,6,7,0,1,2]",
            "output": "0",
            "explanation": "The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,4,5,1,2]],
            "output": 1
          },
          {
            "input": [[4,5,6,7,0,1,2]],
            "output": 0
          },
          {
            "input": [[11,13,15,17]],
            "output": 11
          }
        ]
      },
      {
        "id": "search-in-rotated-sorted-array",
        "title": "Search in Rotated Sorted Array",
        "description": "There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length). Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
        "difficulty": "Medium",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "nums = [4,5,6,7,0,1,2], target = 0",
            "output": "4",
            "explanation": "Target 0 is found at index 4"
          },
          {
            "input": "nums = [4,5,6,7,0,1,2], target = 3",
            "output": "-1",
            "explanation": "3 is not in nums so return -1"
          }
        ],
        "templatePy": "def solution(nums, target):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, target) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[4,5,6,7,0,1,2], 0],
            "output": 4
          },
          {
            "input": [[4,5,6,7,0,1,2], 3],
            "output": -1
          },
          {
            "input": [[1], 0],
            "output": -1
          }
        ]
      },
      {
        "id": "3sum",
        "title": "3 Sum",
        "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
        "difficulty": "Medium",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "45-60 min",
        "examples": [
          {
            "input": "nums = [-1,0,1,2,-1,-4]",
            "output": "[[-1,-1,2],[-1,0,1]]",
            "explanation": "The triplets that sum to 0 are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter."
          },
          {
            "input": "nums = []",
            "output": "[]",
            "explanation": "No three numbers sum to 0"
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[-1,0,1,2,-1,-4]],
            "output": [[-1,-1,2],[-1,0,1]]
          },
          {
            "input": [[0,1,1]],
            "output": []
          },
          {
            "input": [[0,0,0]],
            "output": [[0,0,0]]
          }
        ]
      },
      {
        "id": "container-with-most-water",
        "title": "Container With Most Water",
        "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
        "difficulty": "Medium",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "height = [1,8,6,2,5,4,8,3,7]",
            "output": "49",
            "explanation": "The maximum area is obtained by choosing height[1] = 8 and height[8] = 7, giving us 49"
          },
          {
            "input": "height = [1,1]",
            "output": "1",
            "explanation": "The maximum area is 1"
          }
        ],
        "templatePy": "def solution(height):\n    # Your code here\n    pass",
        "templateJs": "function solution(height) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,8,6,2,5,4,8,3,7]],
            "output": 49
          },
          {
            "input": [[1,1]],
            "output": 1
          },
          {
            "input": [[4,3,2,1,4]],
            "output": 16
          }
        ]
      },
      {
        "id": "product-of-array-except-self",
        "title": "Product of Array Except Self",
        "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.",
        "difficulty": "Medium",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "nums = [1,2,3,4]",
            "output": "[24,12,8,6]",
            "explanation": "[2*3*4, 1*3*4, 1*2*4, 1*2*3]"
          },
          {
            "input": "nums = [-1,1,0,-3,3]",
            "output": "[0,0,9,0,0]"
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,4]],
            "output": [24,12,8,6]
          },
          {
            "input": [[-1,1,0,-3,3]],
            "output": [0,0,9,0,0]
          }
        ]
      },
      {
        "id": "maximum-subarray",
        "title": "Maximum Subarray",
        "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
        "difficulty": "Medium",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
            "output": "6",
            "explanation": "The subarray [4,-1,2,1] has the largest sum = 6."
          },
          {
            "input": "nums = [1]",
            "output": "1"
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[-2,1,-3,4,-1,2,1,-5,4]],
            "output": 6
          },
          {
            "input": [[1]],
            "output": 1
          },
          {
            "input": [[5,4,-1,7,8]],
            "output": 23
          }
        ]
      },
      {
        "id": "maximum-product-subarray",
        "title": "Maximum Product Subarray",
        "description": "Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.",
        "difficulty": "Medium",
        "type": "Arrays",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "nums = [2,3,-2,4]",
            "output": "6",
            "explanation": "The subarray [2,3] has the largest product = 6."
          },
          {
            "input": "nums = [-2,0,-1]",
            "output": "0",
            "explanation": "The result cannot be 2, because [-2,-1] is not a contiguous subarray."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[2,3,-2,4]],
            "output": 6
          },
          {
            "input": [[-2,0,-1]],
            "output": 0
          },
          {
            "input": [[-2,3,-4]],
            "output": 24
          }
        ]
      },
      {
        "id": "sum-of-two-integers",
        "title": "Sum of Two Integers",
        "description": "Given two integers a and b, return the sum of the two integers without using the operators + and -.",
        "difficulty": "Medium",
        "type": "Binary",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "a = 1, b = 2",
            "output": "3",
            "explanation": "1 + 2 = 3"
          },
          {
            "input": "a = 2, b = 3",
            "output": "5",
            "explanation": "2 + 3 = 5"
          }
        ],
        "templatePy": "def solution(a, b):\n    # Your code here\n    pass",
        "templateJs": "function solution(a, b) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [1, 2],
            "output": 3
          },
          {
            "input": [2, 3],
            "output": 5
          },
          {
            "input": [-1, 1],
            "output": 0
          }
        ]
      },
      {
        "id": "number-of-1-bits",
        "title": "Number of 1 Bits",
        "description": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).",
        "difficulty": "Easy",
        "type": "Binary",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "n = 00000000000000000000000000001011",
            "output": "3",
            "explanation": "The input binary string has three '1' bits."
          },
          {
            "input": "n = 00000000000000000000000010000000",
            "output": "1",
            "explanation": "The input binary string has one '1' bit."
          }
        ],
        "templatePy": "def solution(n):\n    # Your code here\n    pass",
        "templateJs": "function solution(n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [11],  
            "output": 3
          },
          {
            "input": [128], 
            "output": 1
          },
          {
            "input": [4294967293], 
            "output": 31
          }
        ]
      },
      {
        "id": "counting-bits",
        "title": "Counting Bits",
        "description": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.",
        "difficulty": "Easy",
        "type": "Binary",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "n = 2",
            "output": "[0,1,1]",
            "explanation": "0 --> 0 (0 ones), 1 --> 1 (1 ones), 2 --> 10 (1 ones)"
          },
          {
            "input": "n = 5",
            "output": "[0,1,1,2,1,2]",
            "explanation": "0 --> 0 (0 ones), 1 --> 1 (1 ones), 2 --> 10 (1 ones), 3 --> 11 (2 ones), 4 --> 100 (1 ones), 5 --> 101 (2 ones)"
          }
        ],
        "templatePy": "def solution(n):\n    # Your code here\n    pass",
        "templateJs": "function solution(n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [2],
            "output": [0,1,1]
          },
          {
            "input": [5],
            "output": [0,1,1,2,1,2]
          },
          {
            "input": [0],
            "output": [0]
          }
        ]
      },
      {
        "id": "missing-number",
        "title": "Missing Number",
        "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
        "difficulty": "Easy",
        "type": "Binary",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "nums = [3,0,1]",
            "output": "2",
            "explanation": "n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."
          },
          {
            "input": "nums = [0,1]",
            "output": "2",
            "explanation": "n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,0,1]],
            "output": 2
          },
          {
            "input": [[0,1]],
            "output": 2
          },
          {
            "input": [[9,6,4,2,3,5,7,0,1]],
            "output": 8
          }
        ]
      },
      {
        "id": "reverse-bits",
        "title": "Reverse Bits",
        "description": "Reverse bits of a given 32 bits unsigned integer.",
        "difficulty": "Easy",
        "type": "Binary",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "n = 00000010100101000001111010011100",
            "output": "964176192",
            "explanation": "The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 (00111001011110000010100101000000 in binary)."
          }
        ],
        "templatePy": "def solution(n):\n    # Your code here\n    pass",
        "templateJs": "function solution(n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [43261596],
            "output": 964176192
          },
          {
            "input": [4294967293],
            "output": 3221225471
          }
        ]
      },
      {
        "id": "climbing-stairs",
        "title": "Climbing Stairs",
        "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "difficulty": "Easy",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "n = 2",
            "output": "2",
            "explanation": "There are two ways to climb to the top: 1. 1 step + 1 step, 2. 2 steps"
          },
          {
            "input": "n = 3",
            "output": "3",
            "explanation": "There are three ways to climb to the top: 1. 1 step + 1 step + 1 step, 2. 1 step + 2 steps, 3. 2 steps + 1 step"
          }
        ],
        "templatePy": "def solution(n):\n    # Your code here\n    pass",
        "templateJs": "function solution(n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [2],
            "output": 2
          },
          {
            "input": [3],
            "output": 3
          },
          {
            "input": [4],
            "output": 5
          }
        ]
      },
      {
        "id": "coin-change",
        "title": "Coin Change",
        "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "coins = [1,2,5], amount = 11",
            "output": "3",
            "explanation": "11 = 5 + 5 + 1"
          },
          {
            "input": "coins = [2], amount = 3",
            "output": "-1",
            "explanation": "3 cannot be made up of multiples of 2"
          }
        ],
        "templatePy": "def solution(coins, amount):\n    # Your code here\n    pass",
        "templateJs": "function solution(coins, amount) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,5], 11],
            "output": 3
          },
          {
            "input": [[2], 3],
            "output": -1
          },
          {
            "input": [[1], 0],
            "output": 0
          }
        ]
      },
      {
        "id": "longest-increasing-subsequence",
        "title": "Longest Increasing Subsequence",
        "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "nums = [10,9,2,5,3,7,101,18]",
            "output": "4",
            "explanation": "The longest increasing subsequence is [2,3,7,101], therefore the length is 4."
          },
          {
            "input": "nums = [0,1,0,3,2,3]",
            "output": "4",
            "explanation": "The longest increasing subsequence is [0,1,2,3]."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[10,9,2,5,3,7,101,18]],
            "output": 4
          },
          {
            "input": [[0,1,0,3,2,3]],
            "output": 4
          },
          {
            "input": [[7,7,7,7,7,7,7]],
            "output": 1
          }
        ]
      },
      {
        "id": "longest-common-subsequence",
        "title": "Longest Common Subsequence",
        "description": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "text1 = \"abcde\", text2 = \"ace\"",
            "output": "3",
            "explanation": "The longest common subsequence is \"ace\" and its length is 3."
          },
          {
            "input": "text1 = \"abc\", text2 = \"abc\"",
            "output": "3",
            "explanation": "The longest common subsequence is \"abc\" and its length is 3."
          }
        ],
        "templatePy": "def solution(text1, text2):\n    # Your code here\n    pass",
        "templateJs": "function solution(text1, text2) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["abcde", "ace"],
            "output": 3
          },
          {
            "input": ["abc", "abc"],
            "output": 3
          },
          {
            "input": ["abc", "def"],
            "output": 0
          }
        ]
      },
      {
        "id": "word-break",
        "title": "Word Break Problem",
        "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
            "output": "true",
            "explanation": "Return true because \"leetcode\" can be segmented as \"leet code\"."
          },
          {
            "input": "s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
            "output": "true",
            "explanation": "Return true because \"applepenapple\" can be segmented as \"apple pen apple\"."
          }
        ],
        "templatePy": "def solution(s, wordDict):\n    # Your code here\n    pass",
        "templateJs": "function solution(s, wordDict) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["leetcode", ["leet","code"]],
            "output": true
          },
          {
            "input": ["applepenapple", ["apple","pen"]],
            "output": true
          },
          {
            "input": ["catsandog", ["cats","dog","sand","and","cat"]],
            "output": false
          }
        ]
      },
      {
        "id": "combination-sum-iv",
        "title": "Combination Sum",
        "description": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target. The test cases are generated so that the answer can fit in a 32-bit integer.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "nums = [1,2,3], target = 4",
            "output": "7",
            "explanation": "The possible combination ways are: (1,1,1,1), (1,1,2), (1,2,1), (1,3), (2,1,1), (2,2), (3,1)"
          },
          {
            "input": "nums = [9], target = 3",
            "output": "0",
            "explanation": "There are no combinations that sum to target."
          }
        ],
        "templatePy": "def solution(nums, target):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, target) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3], 4],
            "output": 7
          },
          {
            "input": [[9], 3],
            "output": 0
          },
          {
            "input": [[1,2,3], 32],
            "output": 181997601
          }
        ]
      },
      {
        "id": "house-robber",
        "title": "House Robber",
        "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [1,2,3,1]",
            "output": "4",
            "explanation": "Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4."
          },
          {
            "input": "nums = [2,7,9,3,1]",
            "output": "12",
            "explanation": "Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,1]],
            "output": 4
          },
          {
            "input": [[2,7,9,3,1]],
            "output": 12
          },
          {
            "input": [[2,1,1,2]],
            "output": 4
          }
        ]
      },
      {
        "id": "house-robber-ii",
        "title": "House Robber II",
        "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "nums = [2,3,2]",
            "output": "3",
            "explanation": "You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses."
          },
          {
            "input": "nums = [1,2,3,1]",
            "output": "4",
            "explanation": "Rob house 1 (money = 1) and then rob house 3 (money = 3)."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[2,3,2]],
            "output": 3
          },
          {
            "input": [[1,2,3,1]],
            "output": 4
          },
          {
            "input": [[1,2,3]],
            "output": 3
          }
        ]
      },
      {
        "id": "decode-ways",
        "title": "Decode Ways",
        "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> '1', 'B' -> '2', ..., 'Z' -> '26'. Given a string s containing only digits, return the number of ways to decode it.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "s = \"12\"",
            "output": "2",
            "explanation": "\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."
          },
          {
            "input": "s = \"226\"",
            "output": "3",
            "explanation": "\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
          }
        ],
        "templatePy": "def solution(s):\n    # Your code here\n    pass",
        "templateJs": "function solution(s) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["12"],
            "output": 2
          },
          {
            "input": ["226"],
            "output": 3
          },
          {
            "input": ["06"],
            "output": 0
          }
        ]
      },
      {
        "id": "unique-paths",
        "title": "Unique Paths",
        "description": "A robot is located at the top-left corner of a m x n grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. How many possible unique paths are there?",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "m = 3, n = 7",
            "output": "28",
            "explanation": "There are 28 unique paths from top-left to bottom-right."
          },
          {
            "input": "m = 3, n = 2",
            "output": "3",
            "explanation": "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down -> Down, 2. Down -> Right -> Down, 3. Down -> Down -> Right"
          }
        ],
        "templatePy": "def solution(m, n):\n    # Your code here\n    pass",
        "templateJs": "function solution(m, n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [3, 7],
            "output": 28
          },
          {
            "input": [3, 2],
            "output": 3
          },
          {
            "input": [7, 3],
            "output": 28
          }
        ]
      },
      {
        "id": "jump-game",
        "title": "Jump Game",
        "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.",
        "difficulty": "Medium",
        "type": "Dynamic Programming",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [2,3,1,1,4]",
            "output": "true",
            "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
          },
          {
            "input": "nums = [3,2,1,0,4]",
            "output": "false",
            "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[2,3,1,1,4]],
            "output": true
          },
          {
            "input": [[3,2,1,0,4]],
            "output": false
          },
          {
            "input": [[0]],
            "output": true
          }
        ]
      },
      {
        "id": "clone-graph",
        "title": "Clone Graph",
        "description": "Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "adjList = [[2,4],[1,3],[2,4],[1,3]]",
            "output": "[[2,4],[1,3],[2,4],[1,3]]",
            "explanation": "The graph is cloned with the same structure and values."
          },
          {
            "input": "adjList = [[]]",
            "output": "[[]]",
            "explanation": "Single node with no neighbors."
          }
        ],
        "templatePy": "class Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\ndef solution(node):\n    # Your code here\n    pass",
        "templateJs": "function Node(val, neighbors) {\n    this.val = val === undefined ? 0 : val;\n    this.neighbors = neighbors === undefined ? [] : neighbors;\n}\n\nfunction solution(node) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[2,4],[1,3],[2,4],[1,3]]],
            "output": [[2,4],[1,3],[2,4],[1,3]]
          },
          {
            "input": [[[]]],
            "output": [[]]
          },
          {
            "input": [[]],
            "output": []
          }
        ]
      },
      {
        "id": "pacific-atlantic-water-flow",
        "title": "Pacific Atlantic Water Flow",
        "description": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges. The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c). The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can only flow from a cell to an ocean directly if the cell is on the border of the island. Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
            "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
            "explanation": "The given coordinates are the cells that can reach both oceans."
          }
        ],
        "templatePy": "def solution(heights):\n    # Your code here\n    pass",
        "templateJs": "function solution(heights) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]],
            "output": [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
          },
          {
            "input": [[[1]]],
            "output": [[0,0]]
          }
        ]
      },
      {
        "id": "course-schedule",
        "title": "Course Schedule",
        "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. Return true if you can finish all courses. Otherwise, return false.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "numCourses = 2, prerequisites = [[1,0]]",
            "output": "true",
            "explanation": "There are 2 courses to take. To take course 1 you should have finished course 0. So it is possible."
          },
          {
            "input": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
            "output": "false",
            "explanation": "There are 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. This is impossible."
          }
        ],
        "templatePy": "def solution(numCourses, prerequisites):\n    # Your code here\n    pass",
        "templateJs": "function solution(numCourses, prerequisites) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [2, [[1,0]]],
            "output": true
          },
          {
            "input": [2, [[1,0],[0,1]]],
            "output": false
          },
          {
            "input": [5, [[1,4],[2,4],[3,1],[3,2]]],
            "output": true
          }
        ]
      },
      {
        "id": "longest-consecutive-sequence",
        "title": "Longest Consecutive Sequence",
        "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [100,4,200,1,3,2]",
            "output": "4",
            "explanation": "The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."
          },
          {
            "input": "nums = [0,3,7,2,5,8,4,6,0,1]",
            "output": "9",
            "explanation": "The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[100,4,200,1,3,2]],
            "output": 4
          },
          {
            "input": [[0,3,7,2,5,8,4,6,0,1]],
            "output": 9
          },
          {
            "input": [[1,2,0,1]],
            "output": 3
          }
        ]
      },
      {
        "id": "alien-dictionary",
        "title": "Alien Dictionary",
        "description": "There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you. You are given a list of strings words from the alien language's dictionary, where the strings in words are sorted lexicographically by the rules of this new language. Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return \"\". If there are multiple solutions, return any of them.",
        "difficulty": "Hard",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "45-60 min",
        "examples": [
          {
            "input": "words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]",
            "output": "\"wertf\"",
            "explanation": "The order is: w > e > r > t > f"
          },
          {
            "input": "words = [\"z\",\"x\"]",
            "output": "\"zx\"",
            "explanation": "The order is: z > x"
          }
        ],
        "templatePy": "def solution(words):\n    # Your code here\n    pass",
        "templateJs": "function solution(words) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [["wrt","wrf","er","ett","rftt"]],
            "output": "wertf"
          },
          {
            "input": [["z","x"]],
            "output": "zx"
          },
          {
            "input": [["z","x","z"]],
            "output": ""
          }
        ]
      },
      {
        "id": "graph-valid-tree",
        "title": "Graph Valid Tree",
        "description": "Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]",
            "output": "true",
            "explanation": "The given edges form a valid tree."
          },
          {
            "input": "n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]",
            "output": "false",
            "explanation": "The given edges form a graph with a cycle."
          }
        ],
        "templatePy": "def solution(n, edges):\n    # Your code here\n    pass",
        "templateJs": "function solution(n, edges) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [5, [[0,1],[0,2],[0,3],[1,4]]],
            "output": true
          },
          {
            "input": [5, [[0,1],[1,2],[2,3],[1,3],[1,4]]],
            "output": false
          },
          {
            "input": [4, [[0,1],[2,3]]],
            "output": false
          }
        ]
      },
      {
        "id": "insert-interval",
        "title": "Insert Interval",
        "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval. Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary). Return intervals after the insertion.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
            "output": "[[1,5],[6,9]]",
            "explanation": "The new interval [2,5] overlaps with [1,3], so they are merged into [1,5]."
          },
          {
            "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
            "output": "[[1,2],[3,10],[12,16]]",
            "explanation": "Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
          }
        ],
        "templatePy": "def solution(intervals, newInterval):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals, newInterval) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,3],[6,9]], [2,5]],
            "output": [[1,5],[6,9]]
          },
          {
            "input": [[[1,2],[3,5],[6,7],[8,10],[12,16]], [4,8]],
            "output": [[1,2],[3,10],[12,16]]
          },
          {
            "input": [[], [5,7]],
            "output": [[5,7]]
          }
        ]
      },
      {
        "id": "merge-intervals",
        "title": "Merge Intervals",
        "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
            "output": "[[1,6],[8,10],[15,18]]",
            "explanation": "Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
          },
          {
            "input": "intervals = [[1,4],[4,5]]",
            "output": "[[1,5]]",
            "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,3],[2,6],[8,10],[15,18]]],
            "output": [[1,6],[8,10],[15,18]]
          },
          {
            "input": [[[1,4],[4,5]]],
            "output": [[1,5]]
          },
          {
            "input": [[[1,4],[2,3]]],
            "output": [[1,4]]
          }
        ]
      },
      {
        "id": "non-overlapping-intervals",
        "title": "Non-overlapping Intervals",
        "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[1,2],[2,3],[3,4],[1,3]]",
            "output": "1",
            "explanation": "Remove [1,3] and the rest of the intervals are non-overlapping."
          },
          {
            "input": "intervals = [[1,2],[1,2],[1,2]]",
            "output": "2",
            "explanation": "You need to remove two [1,2] to make the rest of the intervals non-overlapping."
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2],[2,3],[3,4],[1,3]]],
            "output": 1
          },
          {
            "input": [[[1,2],[1,2],[1,2]]],
            "output": 2
          },
          {
            "input": [[[1,2],[2,3]]],
            "output": 0
          }
        ]
      },
      {
        "id": "meeting-rooms",
        "title": "Meeting Rooms",
        "description": "Given an array of meeting time intervals where intervals[i] = [starti, endi], determine if a person could attend all meetings.",
        "difficulty": "Easy",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "intervals = [[0,30],[5,10],[15,20]]",
            "output": "false",
            "explanation": "The person cannot attend all meetings, as [0,30] overlaps with [5,10] and [15,20]."
          },
          {
            "input": "intervals = [[7,10],[2,4]]",
            "output": "true",
            "explanation": "The person can attend all meetings, as [7,10] and [2,4] do not overlap."
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[0,30],[5,10],[15,20]]],
            "output": false
          },
          {
            "input": [[[7,10],[2,4]]],
            "output": true
          },
          {
            "input": [[[1,2],[2,3]]],
            "output": true
          }
        ]
      },
      {
        "id": "meeting-rooms-ii",
        "title": "Meeting Rooms II",
        "description": "Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[0,30],[5,10],[15,20]]",
            "output": "2",
            "explanation": "We need two meeting rooms: Room 1: [0,30], Room 2: [5,10],[15,20]"
          },
          {
            "input": "intervals = [[7,10],[2,4]]",
            "output": "1",
            "explanation": "One room is sufficient as the meetings don't overlap"
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[0,30],[5,10],[15,20]]],
            "output": 2
          },
          {
            "input": [[[7,10],[2,4]]],
            "output": 1
          },
          {
            "input": [[[1,4],[4,5],[5,6]]],
            "output": 1
          }
        ]
      },
      {
        "id": "reverse-linked-list",
        "title": "Reverse Linked List",
        "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
        "difficulty": "Easy",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "head = [1,2,3,4,5]",
            "output": "[5,4,3,2,1]",
            "explanation": "The linked list is reversed"
          },
          {
            "input": "head = [1,2]",
            "output": "[2,1]",
            "explanation": "The linked list is reversed"
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,4,5]],
            "output": [5,4,3,2,1]
          },
          {
            "input": [[1,2]],
            "output": [2,1]
          },
          {
            "input": [[]],
            "output": []
          }
        ]
      },
      {
        "id": "linked-list-cycle",
        "title": "Linked List Cycle",
        "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.",
        "difficulty": "Easy",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "head = [3,2,0,-4], pos = 1",
            "output": "true",
            "explanation": "There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
          },
          {
            "input": "head = [1,2], pos = 0",
            "output": "true",
            "explanation": "There is a cycle in the linked list, where the tail connects to the 0th node."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,2,0,-4]],
            "output": true
          },
          {
            "input": [[1,2]],
            "output": true
          },
          {
            "input": [[1]],
            "output": false
          }
        ]
      },
      {
        "id": "merge-two-sorted-lists",
        "title": "Merge Two Sorted Lists",
        "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
        "difficulty": "Easy",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "list1 = [1,2,4], list2 = [1,3,4]",
            "output": "[1,1,2,3,4,4]",
            "explanation": "The two lists are merged in sorted order."
          },
          {
            "input": "list1 = [], list2 = []",
            "output": "[]",
            "explanation": "Both lists being empty, the result is empty."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(list1, list2):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(list1, list2) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,4], [1,3,4]],
            "output": [1,1,2,3,4,4]
          },
          {
            "input": [[], []],
            "output": []
          },
          {
            "input": [[], [0]],
            "output": [0]
          }
        ]
      },
      {
        "id": "remove-nth-node-from-end",
        "title": "Remove Nth Node From End of List",
        "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
        "difficulty": "Medium",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "head = [1,2,3,4,5], n = 2",
            "output": "[1,2,3,5]",
            "explanation": "After removing the second node from the end, the linked list becomes [1,2,3,5]."
          },
          {
            "input": "head = [1], n = 1",
            "output": "[]",
            "explanation": "After removing the first node from the end, the linked list becomes empty."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head, n):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head, n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,4,5], 2],
            "output": [1,2,3,5]
          },
          {
            "input": [[1], 1],
            "output": []
          },
          {
            "input": [[1,2], 1],
            "output": [1]
          }
        ]
      },
      {
        "id": "reorder-list",
        "title": "Reorder List",
        "description": "You are given the head of a singly linked-list. The list can be represented as: L0 → L1 → … → Ln - 1 → Ln. Reorder the list to be on the following form: L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …",
        "difficulty": "Medium",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "head = [1,2,3,4]",
            "output": "[1,4,2,3]",
            "explanation": "The list has been reordered as specified."
          },
          {
            "input": "head = [1,2,3,4,5]",
            "output": "[1,5,2,4,3]",
            "explanation": "The list has been reordered as specified."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,4]],
            "output": [1,4,2,3]
          },
          {
            "input": [[1,2,3,4,5]],
            "output": [1,5,2,4,3]
          },
          {
            "input": [[1]],
            "output": [1]
          }
        ]
      },
      {
        "id": "set-matrix-zeroes",
        "title": "Set Matrix Zeroes",
        "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. You must do it in place.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
            "output": "[[1,0,1],[0,0,0],[1,0,1]]",
            "explanation": "The 0 at position (1,1) causes its entire row and column to be set to 0."
          },
          {
            "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
            "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
            "explanation": "The 0s at positions (0,0) and (0,3) cause their entire rows and columns to be set to 0."
          }
        ],
        "templatePy": "def solution(matrix):\n    # Your code here\n    pass",
        "templateJs": "function solution(matrix) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,1,1],[1,0,1],[1,1,1]]],
            "output": [[1,0,1],[0,0,0],[1,0,1]]
          },
          {
            "input": [[[0,1,2,0],[3,4,5,2],[1,3,1,5]]],
            "output": [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
          }
        ]
      },
      {
        "id": "spiral-matrix",
        "title": "Spiral Matrix",
        "description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
            "output": "[1,2,3,6,9,8,7,4,5]",
            "explanation": "The elements are returned in spiral order."
          },
          {
            "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
            "output": "[1,2,3,4,8,12,11,10,9,5,6,7]",
            "explanation": "The elements are returned in spiral order."
          }
        ],
        "templatePy": "def solution(matrix):\n    # Your code here\n    pass",
        "templateJs": "function solution(matrix) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2,3],[4,5,6],[7,8,9]]],
            "output": [1,2,3,6,9,8,7,4,5]
          },
          {
            "input": [[[1,2,3,4],[5,6,7,8],[9,10,11,12]]],
            "output": [1,2,3,4,8,12,11,10,9,5,6,7]
          }
        ]
      },
      {
        "id": "rotate-image",
        "title": "Rotate Image",
        "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
            "output": "[[7,4,1],[8,5,2],[9,6,3]]",
            "explanation": "Rotate the matrix by 90 degrees clockwise."
          },
          {
            "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
            "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
            "explanation": "Rotate the matrix by 90 degrees clockwise."
          }
        ],
        "templatePy": "def solution(matrix):\n    # Your code here\n    pass",
        "templateJs": "function solution(matrix) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2,3],[4,5,6],[7,8,9]]],
            "output": [[7,4,1],[8,5,2],[9,6,3]]
          },
          {
            "input": [[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]],
            "output": [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
          }
        ]
      },
      {
        "id": "word-search",
        "title": "Word Search",
        "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
            "output": "true",
            "explanation": "The word \"ABCCED\" can be found in the grid."
          },
          {
            "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
            "output": "true",
            "explanation": "The word \"SEE\" can be found in the grid."
          }
        ],
        "templatePy": "def solution(board, word):\n    # Your code here\n    pass",
        "templateJs": "function solution(board, word) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], "ABCCED"],
            "output": true
          },
          {
            "input": [[["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], "SEE"],
            "output": true
          },
          {
            "input": [[["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], "ABCB"],
            "output": false
          }
        ]
      },
      {
        "id": "longest-substring-without-repeating-characters",
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string s, find the length of the longest substring without repeating characters.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "s = \"abcabcbb\"",
            "output": "3",
            "explanation": "The answer is \"abc\", with the length of 3."
          },
          {
            "input": "s = \"bbbbb\"",
            "output": "1",
            "explanation": "The answer is \"b\", with the length of 1."
          }
        ],
        "templatePy": "def solution(s):\n    # Your code here\n    pass",
        "templateJs": "function solution(s) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["abcabcbb"],
            "output": 3
          },
          {
            "input": ["bbbbb"],
            "output": 1
          },
          {
            "input": ["pwwkew"],
            "output": 3
          }
        ]
      },
      {
        "id": "longest-repeating-character-replacement",
        "title": "Longest Repeating Character Replacement",
        "description": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times. Return the length of the longest substring containing the same letter you can get after performing the above operations.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "s = \"ABAB\", k = 2",
            "output": "4",
            "explanation": "Replace the two 'A's with two 'B's or vice versa."
          },
          {
            "input": "s = \"AABABBA\", k = 1",
            "output": "4",
            "explanation": "Replace the one 'A' in the middle with 'B' and form \"AABBBBA\". The substring \"BBBB\" has the longest repeating letters, which is 4."
          }
        ],
        "templatePy": "def solution(s, k):\n    # Your code here\n    pass",
        "templateJs": "function solution(s, k) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["ABAB", 2],
            "output": 4
          },
          {
            "input": ["AABABBA", 1],
            "output": 4
          },
          {
            "input": ["AAAA", 2],
            "output": 4
          }
        ]
      },
      {
        "id": "minimum-window-substring",
        "title": "Minimum Window Substring",
        "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".",
        "difficulty": "Hard",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "35-45 min",
        "examples": [
          {
            "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
            "output": "\"BANC\"",
            "explanation": "The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."
          },
          {
            "input": "s = \"a\", t = \"a\"",
            "output": "\"a\"",
            "explanation": "The entire string s is the minimum window."
          }
        ],
        "templatePy": "def solution(s, t):\n    # Your code here\n    pass",
        "templateJs": "function solution(s, t) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["ADOBECODEBANC", "ABC"],
            "output": "BANC"
          },
          {
            "input": ["a", "a"],
            "output": "a"
          },
          {
            "input": ["a", "aa"],
            "output": ""
          }
        ]
      },
      {
        "id": "valid-anagram",
        "title": "Valid Anagram",
        "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "difficulty": "Easy",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "s = \"anagram\", t = \"nagaram\"",
            "output": "true",
            "explanation": "The strings contain the same letters in different orders."
          },
          {
            "input": "s = \"rat\", t = \"car\"",
            "output": "false",
            "explanation": "The strings contain different letters."
          }
        ],
        "templatePy": "def solution(s, t):\n    # Your code here\n    pass",
        "templateJs": "function solution(s, t) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["anagram", "nagaram"],
            "output": true
          },
          {
            "input": ["rat", "car"],
            "output": false
          },
          {
            "input": ["", ""],
            "output": true
          }
        ]
      },
      {
        "id": "group-anagrams",
        "title": "Group Anagrams",
        "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
            "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
            "explanation": "The strings are grouped by their anagrams."
          },
          {
            "input": "strs = [\"\"]",
            "output": "[[\"\"]]",
            "explanation": "There is only one empty string."
          }
        ],
        "templatePy": "def solution(strs):\n    # Your code here\n    pass",
        "templateJs": "function solution(strs) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [["eat","tea","tan","ate","nat","bat"]],
            "output": [["bat"],["nat","tan"],["ate","eat","tea"]]
          },
          {
            "input": [[""]],
            "output": [[""]]
          },
          {
            "input": [["a"]],
            "output": [["a"]]
          }
        ]
      },
      {
        "id": "valid-parentheses",
        "title": "Valid Parentheses",
        "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order.",
        "difficulty": "Easy",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "s = \"()\"",
            "output": "true",
            "explanation": "Simple pair of parentheses."
          },
          {
            "input": "s = \"()[]{}\"",
            "output": "true",
            "explanation": "Each opening bracket is closed by its corresponding closing bracket."
          }
        ],
        "templatePy": "def solution(s):\n    # Your code here\n    pass",
        "templateJs": "function solution(s) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["()"],
            "output": true
          },
          {
            "input": ["()[]{}"],
            "output": true
          },
          {
            "input": ["(]"],
            "output": false
          }
        ]
      },
      {
        "id": "palindromic-substrings",
        "title": "Palindromic Substrings",
        "description": "Given a string s, return the number of palindromic substrings in it. A string is a palindrome when it reads the same backward as forward. A substring is a contiguous sequence of characters within the string.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "s = \"abc\"",
            "output": "3",
            "explanation": "Three palindromic strings: \"a\", \"b\", \"c\"."
          },
          {
            "input": "s = \"aaa\"",
            "output": "6",
            "explanation": "Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."
          }
        ],
        "templatePy": "def solution(s):\n    # Your code here\n    pass",
        "templateJs": "function solution(s) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["abc"],
            "output": 3
          },
          {
            "input": ["aaa"],
            "output": 6
          },
          {
            "input": [""],
            "output": 0
          }
        ]
      },
      {
        "id": "encode-and-decode-strings",
        "title": "Encode and Decode Strings",
        "description": "Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "strs = [\"Hello\",\"World\"]",
            "output": "[\"Hello\",\"World\"]",
            "explanation": "The string should be encoded and then decoded back to the original array."
          },
          {
            "input": "strs = [\"\"]",
            "output": "[\"\"]",
            "explanation": "The empty string should be encoded and decoded properly."
          }
        ],
        "templatePy": "class Codec:\n    def encode(self, strs):\n        # Your code here\n        pass\n    \n    def decode(self, s):\n        # Your code here\n        pass",
        "templateJs": "class Codec {\n    encode(strs) {\n        // Your code here\n    }\n    decode(s) {\n        // Your code here\n    }\n}",
        "tests": [
          {
            "input": [["Hello","World"]],
            "output": ["Hello","World"]
          },
          {
            "input": [[""]],
            "output": [""]
          },
          {
            "input": [["",""]],
            "output": ["",""]
          }
        ]
      },
      {
        "id": "maximum-depth-of-binary-tree",
        "title": "Maximum Depth of Binary Tree",
        "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
        "difficulty": "Easy",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "root = [3,9,20,null,null,15,7]",
            "output": "3",
            "explanation": "The maximum depth is 3: from root to the leaf node containing 15 or 7."
          },
          {
            "input": "root = [1,null,2]",
            "output": "2",
            "explanation": "The maximum depth is 2: from root to the leaf node containing 2."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,9,20,null,null,15,7]],
            "output": 3
          },
          {
            "input": [[1,null,2]],
            "output": 2
          },
          {
            "input": [[]],
            "output": 0
          }
        ]
      },
      {
        "id": "same-tree",
        "title": "Same Tree",
        "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
        "difficulty": "Easy",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "p = [1,2,3], q = [1,2,3]",
            "output": "true",
            "explanation": "The trees are identical in structure and values."
          },
          {
            "input": "p = [1,2], q = [1,null,2]",
            "output": "false",
            "explanation": "The trees have different structures."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(p, q):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(p, q) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3], [1,2,3]],
            "output": true
          },
          {
            "input": [[1,2], [1,null,2]],
            "output": false
          },
          {
            "input": [[1,2,1], [1,1,2]],
            "output": false
          }
        ]
      },
      {
        "id": "invert-binary-tree",
        "title": "Invert Binary Tree",
        "description": "Given the root of a binary tree, invert the tree, and return its root. To invert a binary tree, swap every left node with its corresponding right node.",
        "difficulty": "Easy",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "root = [4,2,7,1,3,6,9]",
            "output": "[4,7,2,9,6,3,1]",
            "explanation": "The tree has been inverted by swapping all left and right children."
          },
          {
            "input": "root = [2,1,3]",
            "output": "[2,3,1]",
            "explanation": "The tree has been inverted by swapping all left and right children."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[4,2,7,1,3,6,9]],
            "output": [4,7,2,9,6,3,1]
          },
          {
            "input": [[2,1,3]],
            "output": [2,3,1]
          },
          {
            "input": [[]],
            "output": []
          }
        ]
      },
      {
        "id": "binary-tree-level-order-traversal",
        "title": "Binary Tree Level Order Traversal",
        "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
        "difficulty": "Medium",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "root = [3,9,20,null,null,15,7]",
            "output": "[[3],[9,20],[15,7]]",
            "explanation": "The nodes are returned level by level, from root to leaves."
          },
          {
            "input": "root = [1]",
            "output": "[[1]]",
            "explanation": "Single node tree returns single level."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,9,20,null,null,15,7]],
            "output": [[3],[9,20],[15,7]]
          },
          {
            "input": [[1]],
            "output": [[1]]
          },
          {
            "input": [[]],
            "output": []
          }
        ]
      },
      {
        "id": "binary-tree-maximum-path-sum",
        "title": "Binary Tree Maximum Path Sum",
        "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root. The path sum of a path is the sum of the node's values in the path. Given the root of a binary tree, return the maximum path sum of any non-empty path.",
        "difficulty": "Hard",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "root = [1,2,3]",
            "output": "6",
            "explanation": "The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."
          },
          {
            "input": "root = [-10,9,20,null,null,15,7]",
            "output": "42",
            "explanation": "The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3]],
            "output": 6
          },
          {
            "input": [[-10,9,20,null,null,15,7]],
            "output": 42
          },
          {
            "input": [[2,-1]],
            "output": 2
          }
        ]
      },
      {
        "id": "serialize-and-deserialize-binary-tree",
        "title": "Serialize and Deserialize Binary Tree",
        "description": "Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.",
        "difficulty": "Hard",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "35-45 min",
        "examples": [
          {
            "input": "root = [1,2,3,null,null,4,5]",
            "output": "[1,2,3,null,null,4,5]",
            "explanation": "The tree should be serialized and then deserialized back to the same structure."
          },
          {
            "input": "root = []",
            "output": "[]",
            "explanation": "Empty tree should be handled properly."
          }
        ],
        "templatePy": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Codec:\n    def serialize(self, root):\n        # Your code here\n        pass\n    \n    def deserialize(self, data):\n        # Your code here\n        pass",
        "templateJs": "function TreeNode(val) {\n    this.val = val;\n    this.left = this.right = null;\n}\n\nvar Codec = function() {\n    // Your code here\n};\n\nCodec.prototype.serialize = function(root) {\n    // Your code here\n};\n\nCodec.prototype.deserialize = function(data) {\n    // Your code here\n};",
        "tests": [
          {
            "input": [[1,2,3,null,null,4,5]],
            "output": [1,2,3,null,null,4,5]
          },
          {
            "input": [[]],
            "output": []
          },
          {
            "input": [[1]],
            "output": [1]
          }
        ]
      },
      {
        "id": "find-median-from-data-stream",
        "title": "Find Median from Data Stream",
        "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values. Design a data structure that supports adding integers to the data stream and calculating the median.",
        "difficulty": "Hard",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "35-45 min",
        "examples": [
          {
            "input": "[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]",
            "output": "[null, null, null, 1.5, null, 2.0]",
            "explanation": "MedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0"
          }
        ],
        "templatePy": "class MedianFinder:\n    def __init__(self):\n        # Your code here\n        pass\n    \n    def addNum(self, num: int) -> None:\n        # Your code here\n        pass\n    \n    def findMedian(self) -> float:\n        # Your code here\n        pass",
        "templateJs": "class MedianFinder {\n    constructor() {\n        // Your code here\n    }\n    \n    addNum(num) {\n        // Your code here\n    }\n    \n    findMedian() {\n        // Your code here\n    }\n}",
        "tests": [
          {
            "input": [["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"],[[],[1],[2],[],[3],[]]],
            "output": [null,null,null,1.5,null,2.0]
          },
          {
            "input": [["MedianFinder","addNum","findMedian"],[[],[1],[]]],
            "output": [null,null,1.0]
          }
        ]
      },
      {
        "id": "merge-k-sorted-lists",
        "title": "Merge k Sorted Lists",
        "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
        "difficulty": "Hard",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
            "output": "[1,1,2,3,4,4,5,6]",
            "explanation": "The linked-lists are merged in sorted order."
          },
          {
            "input": "lists = []",
            "output": "[]",
            "explanation": "Empty list returns empty list."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(lists):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(lists) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,4,5],[1,3,4],[2,6]]],
            "output": [1,1,2,3,4,4,5,6]
          },
          {
            "input": [[]],
            "output": []
          },
          {
            "input": [[[]]],
            "output": []
          }
        ]
      },
      {
        "id": "top-k-frequent-elements",
        "title": "Top K Frequent Elements",
        "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.",
        "difficulty": "Medium",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [1,1,1,2,2,3], k = 2",
            "output": "[1,2]",
            "explanation": "The two most frequent elements are 1 and 2."
          },
          {
            "input": "nums = [1], k = 1",
            "output": "[1]",
            "explanation": "The most frequent element is 1."
          }
        ],
        "templatePy": "def solution(nums, k):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, k) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,1,1,2,2,3], 2],
            "output": [1,2]
          },
          {
            "input": [[1], 1],
            "output": [1]
          },
          {
            "input": [[1,2], 2],
            "output": [1,2]
          }
        ]
      },
      {
        "id": "task-scheduler",
        "title": "Task Scheduler",
        "description": "Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle. However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks. Return the least number of units of time that the CPU will take to finish all the given tasks.",
        "difficulty": "Medium",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
            "output": "8",
            "explanation": "A -> B -> idle -> A -> B -> idle -> A -> B"
          },
          {
            "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0",
            "output": "6",
            "explanation": "A -> A -> A -> B -> B -> B"
          }
        ],
        "templatePy": "def solution(tasks, n):\n    # Your code here\n    pass",
        "templateJs": "function solution(tasks, n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [["A","A","A","B","B","B"], 2],
            "output": 8
          },
          {
            "input": [["A","A","A","B","B","B"], 0],
            "output": 6
          },
          {
            "input": [["A","A","A","A","A","A","B","C","D","E","F","G"], 2],
            "output": 16
          }
        ]
      },
      {
        "id": "binary-search",
        "title": "Binary Search",
        "description": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.",
        "difficulty": "Easy",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "nums = [-1,0,3,5,9,12], target = 9",
            "output": "4",
            "explanation": "9 exists in nums and its index is 4"
          },
          {
            "input": "nums = [-1,0,3,5,9,12], target = 2",
            "output": "-1",
            "explanation": "2 does not exist in nums so return -1"
          }
        ],
        "templatePy": "def solution(nums, target):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, target) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[-1,0,3,5,9,12], 9],
            "output": 4
          },
          {
            "input": [[-1,0,3,5,9,12], 2],
            "output": -1
          },
          {
            "input": [[5], 5],
            "output": 0
          }
        ]
      },
      {
        "id": "search-in-rotated-sorted-array",
        "title": "Search in Rotated Sorted Array",
        "description": "There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. You must write an algorithm with O(log n) runtime complexity.",
        "difficulty": "Medium",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [4,5,6,7,0,1,2], target = 0",
            "output": "4",
            "explanation": "Target 0 is found at index 4"
          },
          {
            "input": "nums = [4,5,6,7,0,1,2], target = 3",
            "output": "-1",
            "explanation": "3 is not in nums"
          }
        ],
        "templatePy": "def solution(nums, target):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, target) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[4,5,6,7,0,1,2], 0],
            "output": 4
          },
          {
            "input": [[4,5,6,7,0,1,2], 3],
            "output": -1
          },
          {
            "input": [[1], 0],
            "output": -1
          }
        ]
      },
      {
        "id": "find-minimum-in-rotated-sorted-array",
        "title": "Find Minimum in Rotated Sorted Array",
        "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2] if it was rotated 4 times. Given the sorted rotated array nums of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time.",
        "difficulty": "Medium",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [3,4,5,1,2]",
            "output": "1",
            "explanation": "The original array was [1,2,3,4,5] rotated 3 times."
          },
          {
            "input": "nums = [4,5,6,7,0,1,2]",
            "output": "0",
            "explanation": "The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,4,5,1,2]],
            "output": 1
          },
          {
            "input": [[4,5,6,7,0,1,2]],
            "output": 0
          },
          {
            "input": [[11,13,15,17]],
            "output": 11
          }
        ]
      },
      {
        "id": "time-based-key-value-store",
        "title": "Time Based Key-Value Store",
        "description": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp. Implement the TimeMap class: TimeMap() Initializes the object of the data structure. void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp. String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \"\".",
        "difficulty": "Medium",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]",
            "output": "[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]",
            "explanation": "TimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\""
          }
        ],
        "templatePy": "class TimeMap:\n    def __init__(self):\n        # Your code here\n        pass\n    \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # Your code here\n        pass\n    \n    def get(self, key: str, timestamp: int) -> str:\n        # Your code here\n        pass",
        "templateJs": "class TimeMap {\n    constructor() {\n        // Your code here\n    }\n    \n    set(key, value, timestamp) {\n        // Your code here\n    }\n    \n    get(key, timestamp) {\n        // Your code here\n    }\n}",
        "tests": [
          {
            "input": [["TimeMap","set","get","get","set","get","get"],[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]],
            "output": [null,null,"bar","bar",null,"bar2","bar2"]
          },
          {
            "input": [["TimeMap","set","set","get","get","get","get","get"],[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]],
            "output": [null,null,null,"","high","high","low","low"]
          }
        ]
      },
      {
        "id": "number-of-islands",
        "title": "Number of Islands",
        "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]",
            "output": "1",
            "explanation": "The grid represents one island."
          },
          {
            "input": "grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]",
            "output": "3",
            "explanation": "The grid represents three islands."
          }
        ],
        "templatePy": "def solution(grid):\n    # Your code here\n    pass",
        "templateJs": "function solution(grid) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]],
            "output": 1
          },
          {
            "input": [[["1","1","0","0","0"],["1","1","0","0","0"],["0","0","1","0","0"],["0","0","0","1","1"]]],
            "output": 3
          }
        ]
      },
      {
        "id": "longest-consecutive-sequence",
        "title": "Longest Consecutive Sequence",
        "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [100,4,200,1,3,2]",
            "output": "4",
            "explanation": "The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."
          },
          {
            "input": "nums = [0,3,7,2,5,8,4,6,0,1]",
            "output": "9",
            "explanation": "The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[100,4,200,1,3,2]],
            "output": 4
          },
          {
            "input": [[0,3,7,2,5,8,4,6,0,1]],
            "output": 9
          },
          {
            "input": [[1,2,0,1]],
            "output": 3
          }
        ]
      },
      {
        "id": "alien-dictionary",
        "title": "Alien Dictionary",
        "description": "There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you. You are given a list of strings words from the alien language's dictionary, where the strings in words are sorted lexicographically by the rules of this new language. Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return \"\". If there are multiple solutions, return any of them.",
        "difficulty": "Hard",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "45-60 min",
        "examples": [
          {
            "input": "words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]",
            "output": "\"wertf\"",
            "explanation": "The order is: w > e > r > t > f"
          },
          {
            "input": "words = [\"z\",\"x\"]",
            "output": "\"zx\"",
            "explanation": "The order is: z > x"
          }
        ],
        "templatePy": "def solution(words):\n    # Your code here\n    pass",
        "templateJs": "function solution(words) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [["wrt","wrf","er","ett","rftt"]],
            "output": "wertf"
          },
          {
            "input": [["z","x"]],
            "output": "zx"
          },
          {
            "input": [["z","x","z"]],
            "output": ""
          }
        ]
      },
      {
        "id": "graph-valid-tree",
        "title": "Graph Valid Tree",
        "description": "Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]",
            "output": "true",
            "explanation": "The given edges form a valid tree."
          },
          {
            "input": "n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]",
            "output": "false",
            "explanation": "The given edges form a graph with a cycle."
          }
        ],
        "templatePy": "def solution(n, edges):\n    # Your code here\n    pass",
        "templateJs": "function solution(n, edges) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [5, [[0,1],[0,2],[0,3],[1,4]]],
            "output": true
          },
          {
            "input": [5, [[0,1],[1,2],[2,3],[1,3],[1,4]]],
            "output": false
          },
          {
            "input": [4, [[0,1],[2,3]]],
            "output": false
          }
        ]
      },
      {
        "id": "insert-interval",
        "title": "Insert Interval",
        "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval. Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary). Return intervals after the insertion.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
            "output": "[[1,5],[6,9]]",
            "explanation": "The new interval [2,5] overlaps with [1,3], so they are merged into [1,5]."
          },
          {
            "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
            "output": "[[1,2],[3,10],[12,16]]",
            "explanation": "Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
          }
        ],
        "templatePy": "def solution(intervals, newInterval):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals, newInterval) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,3],[6,9]], [2,5]],
            "output": [[1,5],[6,9]]
          },
          {
            "input": [[[1,2],[3,5],[6,7],[8,10],[12,16]], [4,8]],
            "output": [[1,2],[3,10],[12,16]]
          },
          {
            "input": [[], [5,7]],
            "output": [[5,7]]
          }
        ]
      },
      {
        "id": "merge-intervals",
        "title": "Merge Intervals",
        "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
            "output": "[[1,6],[8,10],[15,18]]",
            "explanation": "Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
          },
          {
            "input": "intervals = [[1,4],[4,5]]",
            "output": "[[1,5]]",
            "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,3],[2,6],[8,10],[15,18]]],
            "output": [[1,6],[8,10],[15,18]]
          },
          {
            "input": [[[1,4],[4,5]]],
            "output": [[1,5]]
          },
          {
            "input": [[[1,4],[2,3]]],
            "output": [[1,4]]
          }
        ]
      },
      {
        "id": "non-overlapping-intervals",
        "title": "Non-overlapping Intervals",
        "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[1,2],[2,3],[3,4],[1,3]]",
            "output": "1",
            "explanation": "Remove [1,3] and the rest of the intervals are non-overlapping."
          },
          {
            "input": "intervals = [[1,2],[1,2],[1,2]]",
            "output": "2",
            "explanation": "You need to remove two [1,2] to make the rest of the intervals non-overlapping."
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2],[2,3],[3,4],[1,3]]],
            "output": 1
          },
          {
            "input": [[[1,2],[1,2],[1,2]]],
            "output": 2
          },
          {
            "input": [[[1,2],[2,3]]],
            "output": 0
          }
        ]
      },
      {
        "id": "meeting-rooms",
        "title": "Meeting Rooms",
        "description": "Given an array of meeting time intervals where intervals[i] = [starti, endi], determine if a person could attend all meetings.",
        "difficulty": "Easy",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "intervals = [[0,30],[5,10],[15,20]]",
            "output": "false",
            "explanation": "The person cannot attend all meetings, as [0,30] overlaps with [5,10] and [15,20]."
          },
          {
            "input": "intervals = [[7,10],[2,4]]",
            "output": "true",
            "explanation": "The person can attend all meetings, as [7,10] and [2,4] do not overlap."
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[0,30],[5,10],[15,20]]],
            "output": false
          },
          {
            "input": [[[7,10],[2,4]]],
            "output": true
          },
          {
            "input": [[[1,2],[2,3]]],
            "output": true
          }
        ]
      },
      {
        "id": "meeting-rooms-ii",
        "title": "Meeting Rooms II",
        "description": "Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.",
        "difficulty": "Medium",
        "type": "Interval",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "intervals = [[0,30],[5,10],[15,20]]",
            "output": "2",
            "explanation": "We need two meeting rooms: Room 1: [0,30], Room 2: [5,10],[15,20]"
          },
          {
            "input": "intervals = [[7,10],[2,4]]",
            "output": "1",
            "explanation": "One room is sufficient as the meetings don't overlap"
          }
        ],
        "templatePy": "def solution(intervals):\n    # Your code here\n    pass",
        "templateJs": "function solution(intervals) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[0,30],[5,10],[15,20]]],
            "output": 2
          },
          {
            "input": [[[7,10],[2,4]]],
            "output": 1
          },
          {
            "input": [[[1,4],[4,5],[5,6]]],
            "output": 1
          }
        ]
      },
      {
        "id": "reverse-linked-list",
        "title": "Reverse Linked List",
        "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
        "difficulty": "Easy",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "head = [1,2,3,4,5]",
            "output": "[5,4,3,2,1]",
            "explanation": "The linked list is reversed"
          },
          {
            "input": "head = [1,2]",
            "output": "[2,1]",
            "explanation": "The linked list is reversed"
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,4,5]],
            "output": [5,4,3,2,1]
          },
          {
            "input": [[1,2]],
            "output": [2,1]
          },
          {
            "input": [[]],
            "output": []
          }
        ]
      },
      {
        "id": "linked-list-cycle",
        "title": "Linked List Cycle",
        "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.",
        "difficulty": "Easy",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "head = [3,2,0,-4], pos = 1",
            "output": "true",
            "explanation": "There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
          },
          {
            "input": "head = [1,2], pos = 0",
            "output": "true",
            "explanation": "There is a cycle in the linked list, where the tail connects to the 0th node."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,2,0,-4]],
            "output": true
          },
          {
            "input": [[1,2]],
            "output": true
          },
          {
            "input": [[1]],
            "output": false
          }
        ]
      },
      {
        "id": "merge-two-sorted-lists",
        "title": "Merge Two Sorted Lists",
        "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
        "difficulty": "Easy",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "list1 = [1,2,4], list2 = [1,3,4]",
            "output": "[1,1,2,3,4,4]",
            "explanation": "The two lists are merged in sorted order."
          },
          {
            "input": "list1 = [], list2 = []",
            "output": "[]",
            "explanation": "Both lists being empty, the result is empty."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(list1, list2):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(list1, list2) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,4], [1,3,4]],
            "output": [1,1,2,3,4,4]
          },
          {
            "input": [[], []],
            "output": []
          },
          {
            "input": [[], [0]],
            "output": [0]
          }
        ]
      },
      {
        "id": "remove-nth-node-from-end",
        "title": "Remove Nth Node From End of List",
        "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
        "difficulty": "Medium",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "head = [1,2,3,4,5], n = 2",
            "output": "[1,2,3,5]",
            "explanation": "After removing the second node from the end, the linked list becomes [1,2,3,5]."
          },
          {
            "input": "head = [1], n = 1",
            "output": "[]",
            "explanation": "After removing the first node from the end, the linked list becomes empty."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head, n):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head, n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,4,5], 2],
            "output": [1,2,3,5]
          },
          {
            "input": [[1], 1],
            "output": []
          },
          {
            "input": [[1,2], 1],
            "output": [1]
          }
        ]
      },
      {
        "id": "reorder-list",
        "title": "Reorder List",
        "description": "You are given the head of a singly linked-list. The list can be represented as: L0 → L1 → … → Ln - 1 → Ln. Reorder the list to be on the following form: L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …",
        "difficulty": "Medium",
        "type": "Linked List",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "head = [1,2,3,4]",
            "output": "[1,4,2,3]",
            "explanation": "The list has been reordered as specified."
          },
          {
            "input": "head = [1,2,3,4,5]",
            "output": "[1,5,2,4,3]",
            "explanation": "The list has been reordered as specified."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(head) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3,4]],
            "output": [1,4,2,3]
          },
          {
            "input": [[1,2,3,4,5]],
            "output": [1,5,2,4,3]
          },
          {
            "input": [[1]],
            "output": [1]
          }
        ]
      },
      {
        "id": "set-matrix-zeroes",
        "title": "Set Matrix Zeroes",
        "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. You must do it in place.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
            "output": "[[1,0,1],[0,0,0],[1,0,1]]",
            "explanation": "The 0 at position (1,1) causes its entire row and column to be set to 0."
          },
          {
            "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
            "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
            "explanation": "The 0s at positions (0,0) and (0,3) cause their entire rows and columns to be set to 0."
          }
        ],
        "templatePy": "def solution(matrix):\n    # Your code here\n    pass",
        "templateJs": "function solution(matrix) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,1,1],[1,0,1],[1,1,1]]],
            "output": [[1,0,1],[0,0,0],[1,0,1]]
          },
          {
            "input": [[[0,1,2,0],[3,4,5,2],[1,3,1,5]]],
            "output": [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
          }
        ]
      },
      {
        "id": "spiral-matrix",
        "title": "Spiral Matrix",
        "description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
            "output": "[1,2,3,6,9,8,7,4,5]",
            "explanation": "The elements are returned in spiral order."
          },
          {
            "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
            "output": "[1,2,3,4,8,12,11,10,9,5,6,7]",
            "explanation": "The elements are returned in spiral order."
          }
        ],
        "templatePy": "def solution(matrix):\n    # Your code here\n    pass",
        "templateJs": "function solution(matrix) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2,3],[4,5,6],[7,8,9]]],
            "output": [1,2,3,6,9,8,7,4,5]
          },
          {
            "input": [[[1,2,3,4],[5,6,7,8],[9,10,11,12]]],
            "output": [1,2,3,4,8,12,11,10,9,5,6,7]
          }
        ]
      },
      {
        "id": "rotate-image",
        "title": "Rotate Image",
        "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
            "output": "[[7,4,1],[8,5,2],[9,6,3]]",
            "explanation": "Rotate the matrix by 90 degrees clockwise."
          },
          {
            "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
            "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
            "explanation": "Rotate the matrix by 90 degrees clockwise."
          }
        ],
        "templatePy": "def solution(matrix):\n    # Your code here\n    pass",
        "templateJs": "function solution(matrix) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2,3],[4,5,6],[7,8,9]]],
            "output": [[7,4,1],[8,5,2],[9,6,3]]
          },
          {
            "input": [[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]],
            "output": [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
          }
        ]
      },
      {
        "id": "word-search",
        "title": "Word Search",
        "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "difficulty": "Medium",
        "type": "Matrix",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
            "output": "true",
            "explanation": "The word \"ABCCED\" can be found in the grid."
          },
          {
            "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
            "output": "true",
            "explanation": "The word \"SEE\" can be found in the grid."
          }
        ],
        "templatePy": "def solution(board, word):\n    # Your code here\n    pass",
        "templateJs": "function solution(board, word) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], "ABCCED"],
            "output": true
          },
          {
            "input": [[["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], "SEE"],
            "output": true
          },
          {
            "input": [[["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], "ABCB"],
            "output": false
          }
        ]
      },
      {
        "id": "longest-substring-without-repeating-characters",
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string s, find the length of the longest substring without repeating characters.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "s = \"abcabcbb\"",
            "output": "3",
            "explanation": "The answer is \"abc\", with the length of 3."
          },
          {
            "input": "s = \"bbbbb\"",
            "output": "1",
            "explanation": "The answer is \"b\", with the length of 1."
          }
        ],
        "templatePy": "def solution(s):\n    # Your code here\n    pass",
        "templateJs": "function solution(s) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["abcabcbb"],
            "output": 3
          },
          {
            "input": ["bbbbb"],
            "output": 1
          },
          {
            "input": ["pwwkew"],
            "output": 3
          }
        ]
      },
      {
        "id": "longest-repeating-character-replacement",
        "title": "Longest Repeating Character Replacement",
        "description": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times. Return the length of the longest substring containing the same letter you can get after performing the above operations.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "s = \"ABAB\", k = 2",
            "output": "4",
            "explanation": "Replace the two 'A's with two 'B's or vice versa."
          },
          {
            "input": "s = \"AABABBA\", k = 1",
            "output": "4",
            "explanation": "Replace the one 'A' in the middle with 'B' and form \"AABBBBA\". The substring \"BBBB\" has the longest repeating letters, which is 4."
          }
        ],
        "templatePy": "def solution(s, k):\n    # Your code here\n    pass",
        "templateJs": "function solution(s, k) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["ABAB", 2],
            "output": 4
          },
          {
            "input": ["AABABBA", 1],
            "output": 4
          },
          {
            "input": ["AAAA", 2],
            "output": 4
          }
        ]
      },
      {
        "id": "minimum-window-substring",
        "title": "Minimum Window Substring",
        "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".",
        "difficulty": "Hard",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "35-45 min",
        "examples": [
          {
            "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
            "output": "\"BANC\"",
            "explanation": "The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."
          },
          {
            "input": "s = \"a\", t = \"a\"",
            "output": "\"a\"",
            "explanation": "The entire string s is the minimum window."
          }
        ],
        "templatePy": "def solution(s, t):\n    # Your code here\n    pass",
        "templateJs": "function solution(s, t) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["ADOBECODEBANC", "ABC"],
            "output": "BANC"
          },
          {
            "input": ["a", "a"],
            "output": "a"
          },
          {
            "input": ["a", "aa"],
            "output": ""
          }
        ]
      },
      {
        "id": "valid-anagram",
        "title": "Valid Anagram",
        "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "difficulty": "Easy",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "s = \"anagram\", t = \"nagaram\"",
            "output": "true",
            "explanation": "The strings contain the same letters in different orders."
          },
          {
            "input": "s = \"rat\", t = \"car\"",
            "output": "false",
            "explanation": "The strings contain different letters."
          }
        ],
        "templatePy": "def solution(s, t):\n    # Your code here\n    pass",
        "templateJs": "function solution(s, t) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["anagram", "nagaram"],
            "output": true
          },
          {
            "input": ["rat", "car"],
            "output": false
          },
          {
            "input": ["", ""],
            "output": true
          }
        ]
      },
      {
        "id": "group-anagrams",
        "title": "Group Anagrams",
        "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
            "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
            "explanation": "The strings are grouped by their anagrams."
          },
          {
            "input": "strs = [\"\"]",
            "output": "[[\"\"]]",
            "explanation": "There is only one empty string."
          }
        ],
        "templatePy": "def solution(strs):\n    # Your code here\n    pass",
        "templateJs": "function solution(strs) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [["eat","tea","tan","ate","nat","bat"]],
            "output": [["bat"],["nat","tan"],["ate","eat","tea"]]
          },
          {
            "input": [[""]],
            "output": [[""]]
          },
          {
            "input": [["a"]],
            "output": [["a"]]
          }
        ]
      },
      {
        "id": "valid-parentheses",
        "title": "Valid Parentheses",
        "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order.",
        "difficulty": "Easy",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "s = \"()\"",
            "output": "true",
            "explanation": "Simple pair of parentheses."
          },
          {
            "input": "s = \"()[]{}\"",
            "output": "true",
            "explanation": "Each opening bracket is closed by its corresponding closing bracket."
          }
        ],
        "templatePy": "def solution(s):\n    # Your code here\n    pass",
        "templateJs": "function solution(s) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["()"],
            "output": true
          },
          {
            "input": ["()[]{}"],
            "output": true
          },
          {
            "input": ["(]"],
            "output": false
          }
        ]
      },
      {
        "id": "palindromic-substrings",
        "title": "Palindromic Substrings",
        "description": "Given a string s, return the number of palindromic substrings in it. A string is a palindrome when it reads the same backward as forward. A substring is a contiguous sequence of characters within the string.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "s = \"abc\"",
            "output": "3",
            "explanation": "Three palindromic strings: \"a\", \"b\", \"c\"."
          },
          {
            "input": "s = \"aaa\"",
            "output": "6",
            "explanation": "Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."
          }
        ],
        "templatePy": "def solution(s):\n    # Your code here\n    pass",
        "templateJs": "function solution(s) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["abc"],
            "output": 3
          },
          {
            "input": ["aaa"],
            "output": 6
          },
          {
            "input": [""],
            "output": 0
          }
        ]
      },
      {
        "id": "encode-and-decode-strings",
        "title": "Encode and Decode Strings",
        "description": "Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.",
        "difficulty": "Medium",
        "type": "String",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "strs = [\"Hello\",\"World\"]",
            "output": "[\"Hello\",\"World\"]",
            "explanation": "The string should be encoded and then decoded back to the original array."
          },
          {
            "input": "strs = [\"\"]",
            "output": "[\"\"]",
            "explanation": "The empty string should be encoded and decoded properly."
          }
        ],
        "templatePy": "class Codec:\n    def encode(self, strs):\n        # Your code here\n        pass\n    \n    def decode(self, s):\n        # Your code here\n        pass",
        "templateJs": "class Codec {\n    encode(strs) {\n        // Your code here\n    }\n    decode(s) {\n        // Your code here\n    }\n}",
        "tests": [
          {
            "input": [["Hello","World"]],
            "output": ["Hello","World"]
          },
          {
            "input": [[""]],
            "output": [""]
          },
          {
            "input": [["",""]],
            "output": ["",""]
          }
        ]
      },
      {
        "id": "maximum-depth-of-binary-tree",
        "title": "Maximum Depth of Binary Tree",
        "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
        "difficulty": "Easy",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "root = [3,9,20,null,null,15,7]",
            "output": "3",
            "explanation": "The maximum depth is 3: from root to the leaf node containing 15 or 7."
          },
          {
            "input": "root = [1,null,2]",
            "output": "2",
            "explanation": "The maximum depth is 2: from root to the leaf node containing 2."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,9,20,null,null,15,7]],
            "output": 3
          },
          {
            "input": [[1,null,2]],
            "output": 2
          },
          {
            "input": [[]],
            "output": 0
          }
        ]
      },
      {
        "id": "same-tree",
        "title": "Same Tree",
        "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
        "difficulty": "Easy",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "p = [1,2,3], q = [1,2,3]",
            "output": "true",
            "explanation": "The trees are identical in structure and values."
          },
          {
            "input": "p = [1,2], q = [1,null,2]",
            "output": "false",
            "explanation": "The trees have different structures."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(p, q):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(p, q) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3], [1,2,3]],
            "output": true
          },
          {
            "input": [[1,2], [1,null,2]],
            "output": false
          },
          {
            "input": [[1,2,1], [1,1,2]],
            "output": false
          }
        ]
      },
      {
        "id": "invert-binary-tree",
        "title": "Invert Binary Tree",
        "description": "Given the root of a binary tree, invert the tree, and return its root. To invert a binary tree, swap every left node with its corresponding right node.",
        "difficulty": "Easy",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "root = [4,2,7,1,3,6,9]",
            "output": "[4,7,2,9,6,3,1]",
            "explanation": "The tree has been inverted by swapping all left and right children."
          },
          {
            "input": "root = [2,1,3]",
            "output": "[2,3,1]",
            "explanation": "The tree has been inverted by swapping all left and right children."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[4,2,7,1,3,6,9]],
            "output": [4,7,2,9,6,3,1]
          },
          {
            "input": [[2,1,3]],
            "output": [2,3,1]
          },
          {
            "input": [[]],
            "output": []
          }
        ]
      },
      {
        "id": "binary-tree-level-order-traversal",
        "title": "Binary Tree Level Order Traversal",
        "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
        "difficulty": "Medium",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "20-30 min",
        "examples": [
          {
            "input": "root = [3,9,20,null,null,15,7]",
            "output": "[[3],[9,20],[15,7]]",
            "explanation": "The nodes are returned level by level, from root to leaves."
          },
          {
            "input": "root = [1]",
            "output": "[[1]]",
            "explanation": "Single node tree returns single level."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,9,20,null,null,15,7]],
            "output": [[3],[9,20],[15,7]]
          },
          {
            "input": [[1]],
            "output": [[1]]
          },
          {
            "input": [[]],
            "output": []
          }
        ]
      },
      {
        "id": "binary-tree-maximum-path-sum",
        "title": "Binary Tree Maximum Path Sum",
        "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root. The path sum of a path is the sum of the node's values in the path. Given the root of a binary tree, return the maximum path sum of any non-empty path.",
        "difficulty": "Hard",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "30-45 min",
        "examples": [
          {
            "input": "root = [1,2,3]",
            "output": "6",
            "explanation": "The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."
          },
          {
            "input": "root = [-10,9,20,null,null,15,7]",
            "output": "42",
            "explanation": "The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
          }
        ],
        "templatePy": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef solution(root):\n    # Your code here\n    pass",
        "templateJs": "function TreeNode(val, left, right) {\n    this.val = (val===undefined ? 0 : val)\n    this.left = (left===undefined ? null : left)\n    this.right = (right===undefined ? null : right)\n}\n\nfunction solution(root) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,2,3]],
            "output": 6
          },
          {
            "input": [[-10,9,20,null,null,15,7]],
            "output": 42
          },
          {
            "input": [[2,-1]],
            "output": 2
          }
        ]
      },
      {
        "id": "serialize-and-deserialize-binary-tree",
        "title": "Serialize and Deserialize Binary Tree",
        "description": "Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.",
        "difficulty": "Hard",
        "type": "Tree",
        "topic": "algo",
        "timeEstimate": "35-45 min",
        "examples": [
          {
            "input": "root = [1,2,3,null,null,4,5]",
            "output": "[1,2,3,null,null,4,5]",
            "explanation": "The tree should be serialized and then deserialized back to the same structure."
          },
          {
            "input": "root = []",
            "output": "[]",
            "explanation": "Empty tree should be handled properly."
          }
        ],
        "templatePy": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Codec:\n    def serialize(self, root):\n        # Your code here\n        pass\n    \n    def deserialize(self, data):\n        # Your code here\n        pass",
        "templateJs": "function TreeNode(val) {\n    this.val = val;\n    this.left = this.right = null;\n}\n\nvar Codec = function() {\n    // Your code here\n};\n\nCodec.prototype.serialize = function(root) {\n    // Your code here\n};\n\nCodec.prototype.deserialize = function(data) {\n    // Your code here\n};",
        "tests": [
          {
            "input": [[1,2,3,null,null,4,5]],
            "output": [1,2,3,null,null,4,5]
          },
          {
            "input": [[]],
            "output": []
          },
          {
            "input": [[1]],
            "output": [1]
          }
        ]
      },
      {
        "id": "find-median-from-data-stream",
        "title": "Find Median from Data Stream",
        "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values. Design a data structure that supports adding integers to the data stream and calculating the median.",
        "difficulty": "Hard",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "35-45 min",
        "examples": [
          {
            "input": "[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]",
            "output": "[null, null, null, 1.5, null, 2.0]",
            "explanation": "MedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0"
          }
        ],
        "templatePy": "class MedianFinder:\n    def __init__(self):\n        # Your code here\n        pass\n    \n    def addNum(self, num: int) -> None:\n        # Your code here\n        pass\n    \n    def findMedian(self) -> float:\n        # Your code here\n        pass",
        "templateJs": "class MedianFinder {\n    constructor() {\n        // Your code here\n    }\n    \n    addNum(num) {\n        // Your code here\n    }\n    \n    findMedian() {\n        // Your code here\n    }\n}",
        "tests": [
          {
            "input": [["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"],[[],[1],[2],[],[3],[]]],
            "output": [null,null,null,1.5,null,2.0]
          },
          {
            "input": [["MedianFinder","addNum","findMedian"],[[],[1],[]]],
            "output": [null,null,1.0]
          }
        ]
      },
      {
        "id": "merge-k-sorted-lists",
        "title": "Merge k Sorted Lists",
        "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
        "difficulty": "Hard",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
            "output": "[1,1,2,3,4,4,5,6]",
            "explanation": "The linked-lists are merged in sorted order."
          },
          {
            "input": "lists = []",
            "output": "[]",
            "explanation": "Empty list returns empty list."
          }
        ],
        "templatePy": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(lists):\n    # Your code here\n    pass",
        "templateJs": "function ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n}\n\nfunction solution(lists) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,4,5],[1,3,4],[2,6]]],
            "output": [1,1,2,3,4,4,5,6]
          },
          {
            "input": [[]],
            "output": []
          },
          {
            "input": [[[]]],
            "output": []
          }
        ]
      },
      {
        "id": "top-k-frequent-elements",
        "title": "Top K Frequent Elements",
        "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.",
        "difficulty": "Medium",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [1,1,1,2,2,3], k = 2",
            "output": "[1,2]",
            "explanation": "The two most frequent elements are 1 and 2."
          },
          {
            "input": "nums = [1], k = 1",
            "output": "[1]",
            "explanation": "The most frequent element is 1."
          }
        ],
        "templatePy": "def solution(nums, k):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, k) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[1,1,1,2,2,3], 2],
            "output": [1,2]
          },
          {
            "input": [[1], 1],
            "output": [1]
          },
          {
            "input": [[1,2], 2],
            "output": [1,2]
          }
        ]
      },
      {
        "id": "task-scheduler",
        "title": "Task Scheduler",
        "description": "Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle. However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks. Return the least number of units of time that the CPU will take to finish all the given tasks.",
        "difficulty": "Medium",
        "type": "Heap",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
            "output": "8",
            "explanation": "A -> B -> idle -> A -> B -> idle -> A -> B"
          },
          {
            "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0",
            "output": "6",
            "explanation": "A -> A -> A -> B -> B -> B"
          }
        ],
        "templatePy": "def solution(tasks, n):\n    # Your code here\n    pass",
        "templateJs": "function solution(tasks, n) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [["A","A","A","B","B","B"], 2],
            "output": 8
          },
          {
            "input": [["A","A","A","B","B","B"], 0],
            "output": 6
          },
          {
            "input": [["A","A","A","A","A","A","B","C","D","E","F","G"], 2],
            "output": 16
          }
        ]
      },
      {
        "id": "binary-search",
        "title": "Binary Search",
        "description": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.",
        "difficulty": "Easy",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "15-25 min",
        "examples": [
          {
            "input": "nums = [-1,0,3,5,9,12], target = 9",
            "output": "4",
            "explanation": "9 exists in nums and its index is 4"
          },
          {
            "input": "nums = [-1,0,3,5,9,12], target = 2",
            "output": "-1",
            "explanation": "2 does not exist in nums so return -1"
          }
        ],
        "templatePy": "def solution(nums, target):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, target) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[-1,0,3,5,9,12], 9],
            "output": 4
          },
          {
            "input": [[-1,0,3,5,9,12], 2],
            "output": -1
          },
          {
            "input": [[5], 5],
            "output": 0
          }
        ]
      },
      {
        "id": "search-in-rotated-sorted-array",
        "title": "Search in Rotated Sorted Array",
        "description": "There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. You must write an algorithm with O(log n) runtime complexity.",
        "difficulty": "Medium",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [4,5,6,7,0,1,2], target = 0",
            "output": "4",
            "explanation": "Target 0 is found at index 4"
          },
          {
            "input": "nums = [4,5,6,7,0,1,2], target = 3",
            "output": "-1",
            "explanation": "3 is not in nums"
          }
        ],
        "templatePy": "def solution(nums, target):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums, target) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[4,5,6,7,0,1,2], 0],
            "output": 4
          },
          {
            "input": [[4,5,6,7,0,1,2], 3],
            "output": -1
          },
          {
            "input": [[1], 0],
            "output": -1
          }
        ]
      },
      {
        "id": "find-minimum-in-rotated-sorted-array",
        "title": "Find Minimum in Rotated Sorted Array",
        "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2] if it was rotated 4 times. Given the sorted rotated array nums of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time.",
        "difficulty": "Medium",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "nums = [3,4,5,1,2]",
            "output": "1",
            "explanation": "The original array was [1,2,3,4,5] rotated 3 times."
          },
          {
            "input": "nums = [4,5,6,7,0,1,2]",
            "output": "0",
            "explanation": "The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."
          }
        ],
        "templatePy": "def solution(nums):\n    # Your code here\n    pass",
        "templateJs": "function solution(nums) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[3,4,5,1,2]],
            "output": 1
          },
          {
            "input": [[4,5,6,7,0,1,2]],
            "output": 0
          },
          {
            "input": [[11,13,15,17]],
            "output": 11
          }
        ]
      },
      {
        "id": "time-based-key-value-store",
        "title": "Time Based Key-Value Store",
        "description": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp. Implement the TimeMap class: TimeMap() Initializes the object of the data structure. void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp. String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \"\".",
        "difficulty": "Medium",
        "type": "Binary Search",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]",
            "output": "[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]",
            "explanation": "TimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\""
          }
        ],
        "templatePy": "class TimeMap:\n    def __init__(self):\n        # Your code here\n        pass\n    \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # Your code here\n        pass\n    \n    def get(self, key: str, timestamp: int) -> str:\n        # Your code here\n        pass",
        "templateJs": "class TimeMap {\n    constructor() {\n        // Your code here\n    }\n    \n    set(key, value, timestamp) {\n        // Your code here\n    }\n    \n    get(key, timestamp) {\n        // Your code here\n    }\n}",
        "tests": [
          {
            "input": [["TimeMap","set","get","get","set","get","get"],[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]],
            "output": [null,null,"bar","bar",null,"bar2","bar2"]
          },
          {
            "input": [["TimeMap","set","set","get","get","get","get","get"],[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]],
            "output": [null,null,null,"","high","high","low","low"]
          }
        ]
      },
      {
        "id": "course-schedule-ii",
        "title": "Course Schedule II",
        "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "30-40 min",
        "examples": [
          {
            "input": "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]",
            "output": "[0,1,2,3]",
            "explanation": "One valid course order is [0,1,2,3]. Another valid course order is [0,2,1,3]."
          },
          {
            "input": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
            "output": "[]",
            "explanation": "It is impossible to finish all courses."
          }
        ],
        "templatePy": "def solution(numCourses, prerequisites):\n    # Your code here\n    pass",
        "templateJs": "function solution(numCourses, prerequisites) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [4, [[1,0],[2,0],[3,1],[3,2]]],
            "output": [0,1,2,3]
          },
          {
            "input": [2, [[1,0],[0,1]]],
            "output": []
          },
          {
            "input": [1, []],
            "output": [0]
          }
        ]
      },
      {
        "id": "redundant-connection",
        "title": "Redundant Connection",
        "description": "In this problem, a tree is an undirected graph that is connected and has no cycles. You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph. Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "edges = [[1,2],[1,3],[2,3]]",
            "output": "[2,3]",
            "explanation": "The edge [2,3] can be removed to form a tree."
          },
          {
            "input": "edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]",
            "output": "[1,4]",
            "explanation": "The edge [1,4] can be removed to form a tree."
          }
        ],
        "templatePy": "def solution(edges):\n    # Your code here\n    pass",
        "templateJs": "function solution(edges) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [[[1,2],[1,3],[2,3]]],
            "output": [2,3]
          },
          {
            "input": [[[1,2],[2,3],[3,4],[1,4],[1,5]]],
            "output": [1,4]
          },
          {
            "input": [[[1,2],[2,3],[3,4]]],
            "output": []
          }
        ]
      },
      {
        "id": "word-ladder",
        "title": "Word Ladder",
        "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that: Every adjacent pair of words differs by a single letter, and every si for 1 <= i <= k is in wordList. Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",
        "difficulty": "Hard",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "35-45 min",
        "examples": [
          {
            "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
            "output": "5",
            "explanation": "One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", which is 5 words long."
          },
          {
            "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
            "output": "0",
            "explanation": "The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
          }
        ],
        "templatePy": "def solution(beginWord, endWord, wordList):\n    # Your code here\n    pass",
        "templateJs": "function solution(beginWord, endWord, wordList) {\n    // Your code here\n}",
        "tests": [
          {
            "input": ["hit", "cog", ["hot","dot","dog","lot","log","cog"]],
            "output": 5
          },
          {
            "input": ["hit", "cog", ["hot","dot","dog","lot","log"]],
            "output": 0
          },
          {
            "input": ["hit", "hit", ["hot"]],
            "output": 1
          }
        ]
      },
      {
        "id": "graph-valid-tree",
        "title": "Graph Valid Tree",
        "description": "Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.",
        "difficulty": "Medium",
        "type": "Graph",
        "topic": "algo",
        "timeEstimate": "25-35 min",
        "examples": [
          {
            "input": "n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]",
            "output": "true",
            "explanation": "The given edges form a valid tree."
          },
          {
            "input": "n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]",
            "output": "false",
            "explanation": "The given edges form a graph with a cycle."
          }
        ],
        "templatePy": "def solution(n, edges):\n    # Your code here\n    pass",
        "templateJs": "function solution(n, edges) {\n    // Your code here\n}",
        "tests": [
          {
            "input": [5, [[0,1],[0,2],[0,3],[1,4]]],
            "output": true
          },
          {
            "input": [5, [[0,1],[1,2],[2,3],[1,3],[1,4]]],
            "output": false
          },
          {
            "input": [2, [[0,1]]],
            "output": true
          }
        ]
      }
    ]
  }